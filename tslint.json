{
  "rulesDirectory": [
    "node_modules/codelyzer"
  ],
  "rules": {
    // Angular 2 Codelyzer Standard Regeln
    "angular-whitespace": [true, "check-interpolation", "check-semicolon"],
    "banana-in-box": true,
    "templates-no-negated-async": true,
    "directive-selector": [true, "attribute", "sg", "camelCase"],
    "component-selector": [true, "element", "sg", "kebab-case"],
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-host-property-decorator": true,
    "use-view-encapsulation": true,
    "no-attribute-parameter-decorator": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "no-forward-ref": true,
    "use-life-cycle-interface": true,
    "use-pipe-transform-interface": true,
    "pipe-naming": [true, "camelCase", "sg"],
    "component-class-suffix": true,
    "directive-class-suffix": true,
    "pipe-impure": true,

    // Custom Lint Regeln (https://palantir.github.io/tslint/rules/)
    // Signaturen hintereinander
    "adjacent-overload-signatures": true,
    // Einheitliche Ausrichtung der Elemente
    "align": [true, "arguments", "elements", "members", "parameters", "statements"],
    // PascalCased Klassen und Interface Namen
    "class-name": true,
    // Regel für single line comments: // comment
    "comment-format": [
      true,
      "check-space"
    ],
    // Klammern für if/for/do/while Statements.
    "curly": true,
    // Alle Dateien mit UTF-8 Encoding
    "encoding": true,
    //  For ... in Statement wird mit  if statement gefiltert.
    "forin": true,
    // Leerzeichen bei Importstatements TODO: Check line break behavior
    // "import-spacing": true,
    // Einrückung mit tabs oder spaces
    "indent": [
      true,
      "spaces"
    ],
    // Labels nur in sensible statements
    "label-position": true,
    // Begrenzung der Zeilenlänge auf 150 Zeichen
    "max-line-length": [
      true,
      150
    ],
    "max-file-line-count": [true, 1000],
    //  Sichtbarkeit explizit in allen Klassenteilen angeben
    "member-access": false,
    // Reihenfolge der Klassenteile (Variablen, Funktionen, etc)
    "member-ordering": [
      true,
      {"order": "fields-first"}
    ],
    // Kein <Type> sonder as Type
    "no-angle-bracket-type-assertion": true,
    // Verbietet Zugriff auf arguments.callee
    "no-arg": true,
    // Keine Bitweise Operatoren
    "no-bitwise": true,
    // Verbiete bestimmte Funktionen der Konsole
    /*"no-console": [
        true,
        "debug",
        "info",
        "time",
        "timeEnd",
        "trace"
    ],*/
    // Konditionale Zuweisungen werden vermieden bspw: if(var1 = var2), Typo vermeiden
    "no-conditional-assignment": true,
    // Maximal 1 leere Zeile zwischen Codezeilen
    "no-consecutive-blank-lines": true,
    // Verbietet Zugriff auf Konstruktoren von primitiven Datentypen ( String, Number, and Boolean)
    "no-construct": true,
    // Verbietet Debugger-Statements
    "no-debugger": true,
    // Keine Duplikate bei Variablen
    "no-duplicate-variable": true,
    // Keine Duplikate bei super calls
    // Keine Duplikate bei super calls
    "no-duplicate-super": true,
    // Verbietet leere Blöcke
    "no-empty": false,
    // Ausführung der JS Eval-Funktion
    "no-eval": true,
    // Verbietet explizite Typdaklarationen für Variablen oder Paramter von primitiven Datentypen (number, string, or boolean).
    "no-inferrable-types": true,
    // Verbietet interne Module (forciert Namespaces).
    "no-internal-module": true,
    // Verbietet Schattenvariablen
    "no-shadowed-variable": true,
    // Kein Objektzugriff über Stringliterale
    "no-string-literal": false,
    // Kein Durchfallen bei Switch-Case-Fällen (ein Fall muss gewählt sein)
    "no-switch-case-fall-through": true,
    // Keine WhiteSpaces am Ende der Zeile
    "no-trailing-whitespace": true,
    // Keine unbenutzten Ausdrücke
    "no-unused-expression": true,
    // Keine ungenutzten Variablen
    "no-use-before-declare": true,
    // Verbietet Nutzung von var (forciert let, const)
    "no-var-keyword": true,
    // Verbietet Nutzung von requires (forciert ES6 imports)
    "no-var-requires": true,
    // Objekt Literale mit "" nur falls nötig
    "object-literal-key-quotes": [true, "as-needed"],
    /* Überprüfe ob keys in Objekt Literalen in alphabetischer Reihenfolge deklariert
       wurden (Vorbeugen vor Merge-Konflikten)*/
    "object-literal-sort-keys": false,
    // Überprüfe ob tokens in der gleichen Zeile sind wie die folgenden Ausdrücke
    "one-line": [
      true,
      "check-open-brace",
      "check-catch",
      "check-else",
      "check-whitespace"
    ],
    // Sortiere Imports
    "ordered-imports": true,
    // Nutze konditionale Ausdrücke anstelle von multiple ifs
    "prefer-conditional-expression": true,
    // Nutze for-of Loops, einfacher lesbar
    "prefer-for-of": true,
    // Nutze switch-case-Anweisungen, wenn mehr als 3 Fälle unterschieden werden
    "prefer-switch": true,
    // Keine Nutzung von Concat mit x>2 strings
    "prefer-template": true,
    // Verwende konsequent die gleichen Quotemarks
    "quotemark": [true, "double"],
    // Forciert Radix Parameter von parseInt.
    "radix": true,
    // Semikolon konsequent verwenden
    "semicolon": [true, "always"],
    // Keine endenden Kommata in Arrays und Objektliteralen
    "trailing-comma": [
      true, {"multiline": "never", "singleline": "never"}
    ],
    // Forciert Nutzung von === und !== anstelle von == und !=
    "triple-equals": [
      true,
      "allow-null-check"
    ],
    // Forciert whitespace (nospace, one, space) für Typdefinitioen
    "typedef-whitespace": [true, {
      "call-signature": "nospace",
      "index-signature": "nospace",
      "parameter": "nospace",
      "property-declaration": "nospace",
      "variable-declaration": "nospace"
    }],
    // Variablennamen dürfen keine Keywords enthalten
    "variable-name": [
      true,
      "ban-keywords"
    ],
    // Lege fest, welche Whitespaces wo verwendet werden sollen
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-module",
      "check-separator",
      "check-type",
      "check-typecast",
      "check-preblock"
    ]
  }
}
