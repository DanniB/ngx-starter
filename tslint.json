{
  "rulesDirectory": [
    "node_modules/codelyzer"
  ],
  "rules": {
    // Angular 2 Codelyzer Standard Regeln
    "angular-whitespace": [true, "check-interpolation", "check-semicolon"],
    "banana-in-box": true,
    "templates-no-negated-async": true,
    "directive-selector": [true, "attribute", "sg", "camelCase"],
    "component-selector": [true, "element", "sg", "kebab-case"],
    "max-inline-declarations": true,
    "prefer-output-readonly": true,
    "no-conflicting-life-cycle-hooks": true,
    "enforce-component-selector": true,
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-host-property-decorator": true,
    "use-view-encapsulation": true,
    "no-attribute-parameter-decorator": true,
    "no-output-named-after-standard-event": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "no-output-on-prefix": true,
    "no-forward-ref": true,
    "no-unused-css": true,
    "use-life-cycle-interface": true,
    "contextual-life-cycle": true,
    "trackBy-function": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true,
    "pipe-impure": true,
    "i18n": [true, "check-id", "check-text"],
    "template-cyclomatic-complexity": [true, 5],
    "template-conditional-complexity": [true, 4],

    // Custom Lint Regeln (https://palantir.github.io/tslint/rules/)
    // Signaturen hintereinander
    "adjacent-overload-signatures": true,
    // PascalCased Klassen und Interface Namen
    "class-name": true,
    // Regel für single line comments: // comment
    "comment-format": [
      true,
      "check-space"
    ],
    // Klammern für if/for/do/while Statements.
    "curly": true,
    // Alle Dateien mit UTF-8 Encoding
    "encoding": true,
    //  For ... in Statement wird mit  if statement gefiltert.
    "forin": true,
    // Labels nur in sensible statements
    "label-position": true,
    // Maximale Anzahl an Zeilen pro Datei
    "max-file-line-count": [true, 5000],
    //  Sichtbarkeit explizit in allen Klassenteilen angeben
    "member-access": [true, "no-public"],
    // Reihenfolge der Klassenteile (Variablen, Funktionen, etc)
    "member-ordering": [
      true,
      {"order": "fields-first"}
    ],
    // Kein <Type> sonder as Type
    "no-angle-bracket-type-assertion": true,
    // Verbietet Zugriff auf arguments.callee
    "no-arg": true,
    // Keine Bitweise Operatoren
    "no-bitwise": true,
    // Verbiete bestimmte Funktionen der Konsole
    /*"no-console": [
        true,
        "debug",
        "info",
        "time",
        "timeEnd",
        "trace"
    ],*/
    // Konditionale Zuweisungen werden vermieden bspw: if(var1 = var2), Typo vermeiden
    "no-conditional-assignment": true,
    // Verbietet Zugriff auf Konstruktoren von primitiven Datentypen ( String, Number, and Boolean)
    "no-construct": true,
    // Verbietet Debugger-Statements
    "no-debugger": true,
    // Keine Duplikate bei Imports
    "no-duplicate-imports": true,
    // Keine Duplikate bei Variablen
    "no-duplicate-variable": true,
    // Keine Duplikate bei super calls
    "no-duplicate-super": true,
    // Verbietet leere Blöcke
    "no-empty": false,
    // Identische Switch-cases nicht erlaubt
    "no-duplicate-switch-case": true,
    // Ausführung der JS Eval-Funktion
    "no-eval": true,
    // Erlaubt nur Import von Dependencies aus Package.json
    "no-implicit-dependencies": false,
    // Verbietet explizite Typdaklarationen für Variablen oder Paramter von primitiven Datentypen (number, string, or boolean).
    "no-inferrable-types": true,
    // Verbietet interne Module (forciert Namespaces)
    "no-internal-module": true,
    // Parameter dürfen nur einem zugewiesen werden
    "no-parameter-reassignment": false,
    // Keine unnötiges Warten auf return
    "no-return-await": true,
    // Verbietet Schattenvariablen
    "no-shadowed-variable": true,
    // Kein Objektzugriff über Stringliterale
    "no-string-literal": false,
    // Kein Durchfallen bei Switch-Case-Fällen (ein Fall muss gewählt sein)
    "no-switch-case-fall-through": true,
    // Keine unbenutzten Ausdrücke
    "no-unused-expression": true,
    // Keine ungenutzten Variablen
    "no-use-before-declare": true,
    // Verbietet Nutzung von var (forciert let, const)
    "no-var-keyword": true,
    // Verbietet Nutzung von requires (forciert ES6 imports)
    "no-var-requires": true,
    // Sortiere Imports
    "ordered-imports": true,
    // Nutze konditionale Ausdrücke anstelle von multiple ifs
    "prefer-conditional-expression": false,
    // Nutze for-of Loops, einfacher lesbar
    "prefer-for-of": true,
    // Nutze switch-case-Anweisungen, wenn mehr als 3 Fälle unterschieden werden
    "prefer-switch": true,
    // Keine Nutzung von Concat mit x>2 strings
    "prefer-template": true,
    // Forciert Radix Parameter von parseInt.
    "radix": true,
    // Forciert Nutzung von === und !== anstelle von == und !=
    "triple-equals": [
      true,
      "allow-null-check"
    ],
    // Variablennamen dürfen keine Keywords enthalten
    "variable-name": [
      true,
      "ban-keywords"
    ]
  }
}