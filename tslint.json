{
    "rulesDirectory": ["node_modules/codelyzer"],
    "rules": {
        // Angular Codelyzer Standard Regeln
        "component-class-suffix": true,
        "component-max-inline-declarations": true,
        "component-selector": [true, "element", "sg", "kebab-case"],
        "contextual-lifecycle": true,
        "directive-class-suffix": true,
        "directive-selector": [true, "attribute", "sg", "camelCase"],
        "no-attribute-decorator": true,
        "no-conflicting-lifecycle": true,
        "no-forward-ref": true,
        "no-host-metadata-property": true,
        "no-input-rename": true,
        "no-inputs-metadata-property": true,
        "no-lifecycle-call": true,
        "no-output-native": true,
        "no-output-on-prefix": true,
        "no-output-rename": true,
        "no-outputs-metadata-property": true,
        "no-pipe-impure": true,
        "no-queries-metadata-property": true,
        "no-unused-css": true,
        "prefer-inline-decorator": true,
        "prefer-output-readonly": true,
        "template-banana-in-box": true,
        /** Experimental
        "template-conditional-complexity": [true, 4],
        "template-cyclomatic-complexity": [true, 5],
        "template-i18n": [true, "check-id", "check-text"],
        "template-use-track-by-function": true,
        **/
        "template-no-negated-async": true,
        "use-component-selector": true,
        "use-component-view-encapsulation": true,
        "use-lifecycle-interface": true,
        "use-pipe-transform-interface": true,
        // Custom Lint Regeln (https://palantir.github.io/tslint/rules/)
        // Signaturen hintereinander
        "adjacent-overload-signatures": true,
        // PascalCased Klassen und Interface Namen
        "class-name": true,
        // Regel für single line comments: // comment
        "comment-format": [true, "check-space"],
        // Klammern für if/for/do/while Statements.
        "curly": true,
        // Alle Dateien mit UTF-8 Encoding
        "encoding": true,
        //  For ... in Statement wird mit  if statement gefiltert.
        "forin": true,
        // Forciert explizite Nutzung von += 1 or -= 1 Operatoren
        "increment-decrement": true,
        // Labels nur in sensible statements
        "label-position": true,
        // Maximale Anzahl an Zeilen pro Datei
        "max-file-line-count": [true, 5000],
        //  Sichtbarkeit explizit in allen Klassenteilen angeben
        "member-access": [true, "no-public"],
        // Reihenfolge der Klassenteile (Variablen, Funktionen, etc)
        "member-ordering": [true, { "order": "fields-first" }],
        // Kein <Type> sonder as Type
        "no-angle-bracket-type-assertion": true,
        // Verbietet Zugriff auf arguments.callee
        "no-arg": true,
        // Keine Bitweise Operatoren
        "no-bitwise": true,
        // Verbiete bestimmte Funktionen der Konsole
        "no-console": [true, "debug", "info", "time", "timeEnd", "trace"],
        // Konditionale Zuweisungen werden vermieden bspw: if(var1 = var2), Typo vermeiden
        "no-conditional-assignment": true,
        // Verbietet Zugriff auf Konstruktoren von primitiven Datentypen ( String, Number, and Boolean)
        "no-construct": true,
        // Verbietet Debugger-Statements
        "no-debugger": true,
        // Keine Duplikate bei Imports
        "no-duplicate-imports": true,
        // Keine Duplikate bei Variablen
        "no-duplicate-variable": true,
        // Keine Duplikate bei super calls
        "no-duplicate-super": true,
        // Identische Switch-cases nicht erlaubt
        "no-duplicate-switch-case": true,
        // Ausführung der JS Eval-Funktion
        "no-eval": true,
        // Erlaubt nur Import von Dependencies aus Package.json
        "no-implicit-dependencies": true,
        // Verbietet explizite Typdaklarationen für Variablen oder Paramter von primitiven Datentypen (number, string, or boolean).
        "no-inferrable-types": true,
        // Verbietet interne Module (forciert Namespaces)
        "no-internal-module": true,
        // Keine unnötiges Warten auf return
        "no-return-await": true,
        // Verbietet Schattenvariablen
        "no-shadowed-variable": true,
        // Kein Durchfallen bei Switch-Case-Fällen (ein Fall muss gewählt sein)
        "no-switch-case-fall-through": true,
        // Keine unbenutzten Ausdrücke
        "no-unused-expression": true,
        // Verbietet Nutzung von var (forciert let, const)
        "no-var-keyword": true,
        // Verbietet Nutzung von requires (forciert ES6 imports)
        "no-var-requires": true,
        // Sortiere Imports
        "ordered-imports": true,
        // Nutze for-of Loops, einfacher lesbar
        "prefer-for-of": true,
        // Nutze switch-case-Anweisungen, wenn mehr als 3 Fälle unterschieden werden
        "prefer-switch": true,
        // Keine Nutzung von Concat mit x>2 strings
        "prefer-template": true,
        // Forciert Radix Parameter von parseInt.
        "radix": true,
        // Leer Konstruktoren in TS sind überflüssig, werden autmatisch in JS hinzugefügt
        "unnecessary-constructor": true,
        // Forciert Nutzung von === und !== anstelle von == und !=
        "triple-equals": [true, "allow-null-check"],
        // Variablennamen dürfen keine Keywords enthalten
        "variable-name": [true, "ban-keywords"]
    }
}
